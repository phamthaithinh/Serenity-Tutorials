<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)MovieTutorial\MovieTutorial.Web\bin\Serenity.Core.dll" #>
<#@ assembly name="$(SolutionDir)MovieTutorial\MovieTutorial.Web\bin\Serenity.Web.dll" #>
<#@ assembly name="$(SolutionDir)MovieTutorial\MovieTutorial.Web\bin\MovieTutorial.Web.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Serenity" #>
<#@ import namespace="Serenity.Reflection" #>
<#@ import namespace="Serenity.CodeGeneration" #>
<#@ include file="..\MultipleOutputHelper.ttinclude" #>
<#@ output extension=".log" #>
<# 
    var manager = Manager.Create(Host, GenerationEnvironment);

	var contractGenerator = new ScriptDtoGenerator(typeof(MovieTutorial.SiteInitialization).Assembly);
    contractGenerator.RootNamespaces.Add("MovieTutorial");
    var contractCodes = contractGenerator.GenerateCode();
    

    var endpointGenerator = new ScriptEndpointGenerator(typeof(MovieTutorial.SiteInitialization).Assembly);
    endpointGenerator.IsEndpoint = type => type.Namespace.EndsWith(".Endpoints");
    endpointGenerator.GetNamespace = type => type.Namespace.Substring(0, type.Namespace.Length - (".Endpoints").Length);
    endpointGenerator.GetServiceUrl = type => { var ns = type.Namespace; ns = ns.Substring(0, ns.Length - (".Endpoints").Length); ns = ns.Substring("MovieTutorial.".Length); if (ns == "Common") return ""; return ns; };
	endpointGenerator.RootNamespaces.Add("MovieTutorial");
    var endpointCodes = endpointGenerator.GenerateCode();
    
    foreach (var pair in contractCodes) 
    {
        manager.StartNewFile(pair.Key);
#>
<#=pair.Value#>
<# 
        manager.EndBlock(); 
    }
	
	foreach (var pair in endpointCodes) 
    {
        manager.StartNewFile(pair.Key);
#>
<#=pair.Value#>
<# 
        manager.EndBlock(); 
    }

    manager.Process(true);
#>
Executed on <#=DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")#>